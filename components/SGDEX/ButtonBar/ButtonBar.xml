<?xml version="1.0" encoding="UTF-8"?>
<!--BUTTONBAR:Provee una manera facil de desplegar una coleccion de botones sobre 
cualquier vista.
   
    @Sample:
    // MainScene.brs
    m.top.buttonBar.visible = true
    m.top.buttonBar.renderOverContent = true
    m.top.buttonBar.autoHide = true
    m.top.buttonBar.content = retrieveButtonBarContent()
    m.top.buttonBar.ObserveField("itemSelected", "OnButtonBarItemSelected")

    function retrieveButtonBarContent() as Object
        buttonBarContent = CreateObject("roSGNode", "ContentNode")
        buttonBarContent.Update({
            children: [{
                title: "Item 1"
            }, {
                hdPosterUrl: "https://example.com/icon.jpg"
            }, {
                title: "Item 2"
            }, {
                title: "Item 3"
            }, {
                title: "Item 4"
            }]
        }, true)

        return buttonBarContent
    end function

    sub OnButtonBarItemSelected(event as Object)
        ' This is where you can handle a selection event
    end sub
-->
<component name="ButtonBar" extends="Group" xsi:noNamespaceSchemaLocation="https://devtools.web.roku.com/schema/RokuSceneGraph.xsd">
    <interface>
        <!-- CONTENIDO DEL BUTTONBAR -->
        <!--Contiene el hijo de cada boton desplegado
            También puede llenar este nodo utilizando un SGDEX ContentHandler-->
        <field id="content" type="node" />
        <!-- @ReadOnly -->
        <!-- Se actualiza cuando cambia el botón enfocado.-->
        <field id="itemFocused" type="integer" value="0" alwaysNotify="true" />
        <!-- @ReadOnly -->
        <!-- Se actualiza cuando el boton se selecciona-->
        <field id="itemSelected" type="integer" value="0" alwaysNotify="true" />
        <!-- @WriteOnly -->
        <!-- Establezca este campo para forzar el enfoque a un botón específico.
        Recibe un entero.(Por lo que quiero creer es al numero de fila)
        Este campo debe establecerse después de configurar el campo de contenido.-->
        <field id="jumpToItem" type="integer" onChange="OnJumpToItem" value="0" alwaysNotify="true" />
        <!-- @WriteOnly -->
        <!-- Controla si la barra de botones está oculta cuando no tiene foco.
              Cuando ButtonBar está oculto, se mostrará una pista en su lugar.  -->
        <field id="autoHide" type="bool" onChange="OnAutoHideChange" value="false" alwaysNotify="true" />
        <!-- @WriteOnly -->
        <!-- Controls the visibility of ButtonBar. -->
        <!-- <field id="visible" type="bool" value="false" alwaysNotify="true" /> -->

        <!-- @WriteOnly -->
        <!-- Controla si ButtonBar se muestra sobre la reproducción de contenido.
            Tenga en cuenta que la pista AutoHide no se mostrará sobre la reproducción 
            de contenido cuando ButtonBar está oculto, incluso si renderOverContent es verdadero.-->
        <field id="renderOverContent" type="bool" value="false" />
        <!-- @WriteOnly -->
        <!-- Controla si se muestra la huella -->
        <field id="enableFootprint" type="bool" value="true" />
        <!-- @Public -->
        <!-- @WriteOnly -->
        <!-- Possible values: "focus", "selection".
             Controla qué botón obtiene la huella, el último enfocado
              botón o el último botón seleccionado.-->
        <field id="footprintStyle" type="string" value="focus" />
        <!--@Public
            @Override <field id="theme" type="assocarray" />
            @PossibleValue buttonColor - controls the color of button backgrounds
            @PossibleValue buttonTextColor - controls the color of button text

            @PossibleValue focusedButtonColor - controls the color of the focused button's background
            @PossibleValue focusedButtonTextColor - controls the color of the focused button's text

            @PossibleValue footprintButtonColor - controls the color of the footprint button's background
            @PossibleValue footprintButtonTextColor - controls the color of the footprint button's text
        -->
        <field id="theme" type="assocarray" alwaysNotify="true" />
        <field id="updateTheme" type="assocarray" alwaysNotify="true" />
    </interface>
    <script type="text/brightscript" uri="ButtonBar.brs" />
    <script type="text/brightscript" uri="../ContentManager/ContentManagerUtils.brs" />
    <script type="text/brightscript" uri="../Views/utils/Utils.brs" />
    <children>
        <Group id="clippingGroup">
            <Rectangle
                id="backgroundRectangle"
                width="1280"
                height="0"
                color="0xFFFFFF00">
                <LayoutGroup
                    id="buttonBarLayout"
                    layoutDirection="horiz"
                    vertAlignment="center"
                    itemSpacings="[5]">
                    <MaskGroup
                        id="maskGroup"
                        masksize="[1025, 55]"
                        maskOffset="[500, 0]">
                        <RowList
                            id="buttonsRowList"
                            itemComponentName="ButtonBarItemComponent"
                            numRows="1"
                            variableWidthItems="[true]"
                            rowItemSpacing="[[10,0]]"
                            rowFocusAnimationStyle="fixedFocusWrap"
                            drawFocusFeedback="false"
                        />
                    </MaskGroup>
                    <Poster
                        id="buttonBarArrow"
                        height="50"
                        width="25"
                        uri="pkg:/components/SGDEX/Images/ButtonBar/ic_arrow_right.png"
                    />
                </LayoutGroup>
            </Rectangle>
        </Group>

        <LayoutGroup
            id="autoHideHint"
            visible="false"
            layoutDirection="vert"
            vertAlignment="top"
            horizAlignment="center"
            itemSpacings="[5]">

            <Poster
                id="autoHideArrow"
                height="12"
                width="25"
                uri="pkg:/components/SGDEX/Images/ButtonBar/ic_arrow_up.png"
            />
            <Label
                id="hintTitle"
                font="font:SmallestSystemFont"
                height="30"
                width="200"
                text="MENU"
                color="0xffffff"
                horizAlign="center"
                vertAlign="center"
                maxLines="1"
            />
        </LayoutGroup>

        <ParallelAnimation id="buttonBarPopUp">
            <Animation
                duration="0.25"
                easeFunction="linear"
                optional = "true">
                <FloatFieldInterpolator
                    key = "[0.0, 0.25]"
                    keyValue = "[1.0, 0.0]"
                    fieldToInterp = "autoHideHint.opacity"
                />
            </Animation>

            <Animation
                duration="0.25"
                easeFunction="linear"
                optional="true">

                <Vector2DFieldInterpolator
                    id="popUpInterpolator"
                    key="[0.0, 0.25]"
                    fieldToInterp="backgroundRectangle.translation"
                />
            </Animation>
        </ParallelAnimation>

        <ParallelAnimation id="buttonBarFadeOut">
            <Animation
                duration="0.25"
                easeFunction="linear"
                optional="true">

                <Vector2DFieldInterpolator
                    id="fadeOutInterpolator"
                    key="[0.0, 0.25]"
                    fieldToInterp="backgroundRectangle.translation"
                />
            </Animation>

            <Animation
                duration="0.25"
                easeFunction="linear"
                optional="true">

                <FloatFieldInterpolator
                    key="[0.0, 0.25]"
                    keyValue="[0.0, 1.0]"
                    fieldToInterp="autoHideHint.opacity"
                />
            </Animation>
        </ParallelAnimation>
    </children>
</component>
